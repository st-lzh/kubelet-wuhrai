# kubelet-wuhrai 扩展版本 Docker Compose 配置
version: '3.8'

services:
  kubelet-wuhrai:
    build: .
    image: kubelet-wuhrai:latest
    container_name: kubelet-wuhrai
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      # AI模型API密钥 (必需)
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY}
      - VOLCES_API_KEY=${VOLCES_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # 应用配置
      - KUBELET_WUHRAI_CONFIG=/app/config/config.yaml
      - KUBECONFIG=/app/.kube/config
      - KUBELET_WUHRAI_LOG_LEVEL=${LOG_LEVEL:-info}
      - KUBELET_WUHRAI_MAX_ITERATIONS=${MAX_ITERATIONS:-10}
      
      # 时区设置
      - TZ=Asia/Shanghai
    volumes:
      # Kubernetes配置 (只读)
      - ~/.kube:/app/.kube:ro
      
      # 应用配置 (可选，用于自定义配置)
      - ./config:/app/config:ro
      
      # 日志目录
      - ./logs:/app/logs
      
      # 数据目录 (用于持久化数据)
      - ./data:/app/data
      
      # 临时目录
      - /tmp:/tmp
    networks:
      - kubelet-wuhrai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kubelet-wuhrai.rule=Host(`kubelet-wuhrai.local`)"
      - "traefik.http.services.kubelet-wuhrai.loadbalancer.server.port=8888"

  # 可选：Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: kubelet-wuhrai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - kubelet-wuhrai-network
    profiles:
      - monitoring

  # 可选：Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: kubelet-wuhrai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - kubelet-wuhrai-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # 可选：Redis缓存
  redis:
    image: redis:7-alpine
    container_name: kubelet-wuhrai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-kubelet-wuhrai-redis}
    networks:
      - kubelet-wuhrai-network
    profiles:
      - cache

networks:
  kubelet-wuhrai-network:
    driver: bridge
    name: kubelet-wuhrai-network

volumes:
  prometheus_data:
    name: kubelet-wuhrai-prometheus-data
  grafana_data:
    name: kubelet-wuhrai-grafana-data
  redis_data:
    name: kubelet-wuhrai-redis-data
